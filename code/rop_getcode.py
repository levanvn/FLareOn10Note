
from capstone import *

def WriteFile(data):
    f = open("ROP.bin", "wb")
    f.write(data)
    f.close()

code = "\x05\xAC\x00\x00\x00\xC3\x05\xE4\x00\x00\x00\xC3\x05\xE8\x00\x00\x00\xC3\x83\xC0\x5A\xC3\x83\xC0\x60\xC3\x83\xC0\x70\xC3\x83\xC0\x7B\xC3\x05\x8F\x00\x00\x00\xC3\x05\x96\x00\x00\x00\xC3\x03\x45\x24\xC3\x48\x83\xC5\x38\xC3\x39\x45\x24\xC3\xFF\xC0\xC3\x88\x04\x0A\xC3\x89\x55\x10\xC3\x4C\x89\x45\x18\xC3\x88\x45\x20\xC3\x89\x45\x24\xC3\x48\x89\x4D\x08\xC3\xC7\x45\x24\x00\x00\x00\x00\xC3\x8B\x45\x24\xC3\x8B\x45\x48\xC3\x8B\x4D\x24\xC3\x48\x8B\x4D\x40\xC3\x48\x8B\x55\x40\xC3\x48\x8B\x55\x50\xC3\x0F\xB6\x04\x01\xC3\x0F\xB6\x45\x20\xC3\x0F\xB6\x0C\x0A\xC3\x0F\xB6\x4D\x20\xC3\xF7\xD8\xC3\xF7\xD0\xC3\x0B\xC1\xC3\xD1\xF8\xC3\xC1\xF8\x02\xC3\xC1\xF8\x03\xC3\xC1\xF8\x05\xC3\xC1\xF8\x06\xC3\xC1\xF8\x07\xC3\xD1\xE1\xC3\xC1\xE1\x02\xC3\xC1\xE1\x03\xC3\xC1\xE1\x05\xC3\xC1\xE1\x06\xC3\xC1\xE1\x07\xC3\x2D\xB1\x00\x00\x00\xC3\x2D\xB2\x00\x00\x00\xC3\x2D\xC3\x00\x00\x00\xC3\x2D\xC5\x00\x00\x00\xC3\x2D\xDC\x00\x00\x00\xC3\x2D\xF3\x00\x00\x00\xC3\x2D\xFF\x00\x00\x00\xC3\x83\xE8\x18\xC3\x83\xE8\x1A\xC3\x83\xE8\x1E\xC3\x83\xE8\x28\xC3\x83\xE8\x36\xC3\x83\xE8\x04\xC3\x83\xE8\x49\xC3\x83\xE8\x56\xC3\x83\xE8\x58\xC3\x2D\x81\x00\x00\x00\xC3\x2D\x90\x00\x00\x00\xC3\x2D\x9A\x00\x00\x00\xC3\x2B\x45\x24\xC3\x48\x83\xED\x38\xC3\x35\xA3\x00\x00\x00\xC3\x35\xB6\x00\x00\x00\xC3\x35\xBF\x00\x00\x00\xC3\x35\xC2\x00\x00\x00\xC3\x35\xC9\x00\x00\x00\xC3\x35\xCB\x00\x00\x00\xC3\x83\xF0\x0D\xC3\x35\xE1\x00\x00\x00\xC3\x35\xEB\x00\x00\x00\xC3\x83\xF0\x16\xC3\x83\xF0\x20\xC3\x83\xF0\x22\xC3\x83\xF0\x25\xC3\x83\xF0\x40\xC3\x83\xF0\x78\xC3\x83\xF0\x7C\xC3\x35\x8F\x00\x00\x00\xC3\x33\x45\x24\xC3\x33\xC0\xC3\x33\xC1\xC3\xFF\xC1\xC3\x8B\xC9\xC3\x81\xE1\xFF\x00\x00\x00\xC3\x8B\x55\x24\xC3\x83\xC2\x02\xC3\x8B\xD2\xC3\x4C\x8B\x45\x50\xC3\x41\x0F\xB6\x14\x10\xC3\xD1\xFA\xC3\x81\xE2\xFF\x00\x00\x00\xC3\x23\xCA\xC3\x83\xC1\x03\xC3"

offsets = [0x3e, 0x71, 0x68, 0x18c, 0x195, 0xb2, 0x85, 0x76, 0x192, 0x1bf, 0x68, 0x18c, 0x1bc, 0x1b5, 0x1b2, 0x1ac, 0x1a7, 0x1a4, 0x1a0, 0x19c, 0x195, 0xaf, 0x85, 0x76, 0x192, 0x18f, 0x68, 0x18c, 0x85, 0x76, 0x68, 0x80, 0x4b, 0x95, 0xaf, 0x8a, 0xab, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x141, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x6, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x95, 0xb2, 0x8a, 0xa7, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x110, 0x80, 0x4b, 0x16b, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x167, 0x80, 0x4b, 0x95, 0xb6, 0x8a, 0xa3, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0xf8, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x108, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x95, 0xba, 0x8a, 0x9f, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x147, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x95, 0xaf, 0x8a, 0xab, 0x80, 0x4b, 0x16f, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x15d, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x177, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x12, 0x80, 0x4b, 0x95, 0xc2, 0x8a, 0x98, 0x80, 0x4b, 0x22, 0x80, 0x4b, 0x157, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0xc6, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x135, 0x80, 0x4b, 0xf4, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x14d, 0x80, 0x4b, 0x95, 0xb2, 0x8a, 0xa7, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x12f, 0x80, 0x4b, 0x28, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0x17b, 0x80, 0x4b, 0x95, 0xaf, 0x8a, 0xab, 0x80, 0x4b, 0xde, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0xfc, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x11a, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0xcc, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x114, 0x80, 0x4b, 0x163, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x120, 0x80, 0x4b, 0x173, 0x80, 0x4b, 0x95, 0xb6, 0x8a, 0xa3, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x95, 0xb2, 0x8a, 0xa7, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x10c, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0xc, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0x100, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x1a, 0x80, 0x4b, 0x17f, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x95, 0xaf, 0x8a, 0xab, 0x80, 0x4b, 0xea, 0x80, 0x4b, 0x95, 0xaf, 0x8a, 0xab, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0xd8, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0xe4, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0xf0, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x95, 0xb6, 0x8a, 0xa3, 0x80, 0x4b, 0x16, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0xd2, 0x80, 0x4b, 0x13b, 0x80, 0x4b, 0x1e, 0x80, 0x4b, 0x8f, 0x80, 0x4b, 0x153, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x95, 0xb2, 0x8a, 0xa7, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x95, 0xbe, 0x8a, 0x9b, 0x80, 0x4b, 0x2e, 0x80, 0x4b, 0x95, 0xba, 0x8a, 0x9f, 0x80, 0x4b, 0x126, 0x80, 0x4b, 0x92, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x104, 0x80, 0x4b, 0x185, 0x80, 0x4b, 0x0, 0x80, 0x4b, 0x95, 0xba, 0x8a, 0x9f, 0x80, 0x4b, 0x7b, 0x6c, 0x60]
offsets.reverse()
opcodes = bytearray()
md = Cs(CS_ARCH_X86, CS_MODE_64)
for j in offsets:
	for i in md.disasm(code, 0):
		if j == i.address:
			opcodes.extend(i.bytes)
			break

WriteFile(opcodes)		

	